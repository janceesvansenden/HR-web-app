var asserters = require('assertions')
  , render = require('render')

module.exports = renderStyle(null /*styles.colour*/) //now default to no style.

function renderStyle(style) {
  var renderers

  if(style){
   renderers = require('./renderer')
    , styles = require('./styles')

  if('string' === typeof style)
    style = styles[style] || styles.colour
  }

  module.exports = It

  function merge(a,b){
    var ary = [a]
    for(i in b){
      ary.push(b[i])
    }
    return ary
  }

  function renderer (err,name){
    return (renderers[name] || renderers['default']).call(renderers,err,style,name)
  }

  function applyAssertion(actual,assertion,expected,name){
    try{
      assertion.apply(null, merge(actual,expected)) //call the assertion.
    } catch (err){

      if(style){//don't apply message rendering if renderStyle is null
        var m = renderer(err,name)
        if(!err.originalStack){
          err.message = undefined
          var stack = err.stack
          err.originalStack = err.stack
          Object.defineProperty(err,'stack',{
            get: function (){return err.message + '\n' + err.originalStack}
          })
        }
        err.message = m
      }
      throw err  
    }
  }

  /**
   * first way to use it-is
   * it(actual).assertion(expected)
   * assertion function is called directly as if it was invoked like assertion(actual,expected)
  */

  function It(obj){
    if(!(this instanceof It))
      return new It(obj)

    this.obj = obj
    this.assertion = function (name,func,args){
      applyAssertion(this.obj,func,args,name) //just call the function immediately.
      return this
    }
  }

  var asserts = It.prototype = It

  //add all the standard assert methods.

  for(i in asserters) {
    It[i] = asserter(asserters[i],i)
  }

  function asserter(func,name){
    return function (){
      //for(var i in arguments) you cannot do this over arguments in firefox.
      var a = []
      while (arguments.length) 
        {a.push([].shift.call(arguments))};
      return this.asserti